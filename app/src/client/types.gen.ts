// This file is auto-generated by @hey-api/openapi-ts

export type BodyLoginForAccessTokenUsersLoginPost = {
  grant_type?: string | null;
  username: string;
  password: string;
  scope?: string;
  client_id?: string | null;
  client_secret?: string | null;
};

export type BodyUploadFileFilesUploadPost = {
  file: Blob | File;
};

export type CreateUserForm = {
  username: string;
  email?: string | null;
  full_name?: string | null;
  password: string;
  password_repeat: string;
};

export type EmailRequest = {
  email: string;
};

export type EmailVerificationStatus = 'verified' | 'verifying' | 'none';

export const EmailVerificationStatus = {
  VERIFIED: 'verified',
  VERIFYING: 'verifying',
  NONE: 'none',
} as const;

export type FileProcessingStatus =
  | 'pending'
  | 'queuing'
  | 'processing'
  | 'success'
  | 'failed'
  | 'cancelled'
  | 'unknown';

export const FileProcessingStatus = {
  PENDING: 'pending',
  QUEUING: 'queuing',
  PROCESSING: 'processing',
  SUCCESS: 'success',
  FAILED: 'failed',
  CANCELLED: 'cancelled',
  UNKNOWN: 'unknown',
} as const;

export type FileResponse = {
  id: number;
  filename: string;
  status: FileProcessingStatus;
  size: number;
  type: string;
  url: string;
  created_at: Date;
  description: string | null;
};

export type HttpValidationError = {
  detail?: Array<ValidationError>;
};

export type ListFilesResponse = {
  result_count: number;
  page_count: number;
  page_size: number;
  page: number;
  credit: number;
  credit_count: number;
  credit_timestamp: Date | null;
  results: Array<FileResponse>;
};

export type PasswordResetForm = {
  password: string;
  password_repeat: string;
};

export type SortBy = 'created_at' | 'name' | 'status';

export const SortBy = {
  CREATED_AT: 'created_at',
  NAME: 'name',
  STATUS: 'status',
} as const;

export type SortOrder = 'asc' | 'desc';

export const SortOrder = {
  ASC: 'asc',
  DESC: 'desc',
} as const;

export type Token = {
  access_token: string;
  token_type: string;
};

export type UpdateUserForm = {
  username: string;
  email?: string | null;
  full_name?: string | null;
  password?: string | null;
  password_repeat?: string | null;
};

export type UserResponse = {
  username: string;
  email?: string | null;
  full_name?: string | null;
  email_verification_status: EmailVerificationStatus;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type RootGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/';
};

export type RootGetResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type RegisterNewUserUsersRegisterPostData = {
  body: CreateUserForm;
  path?: never;
  query?: never;
  url: '/users/register';
};

export type RegisterNewUserUsersRegisterPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type RegisterNewUserUsersRegisterPostError =
  RegisterNewUserUsersRegisterPostErrors[keyof RegisterNewUserUsersRegisterPostErrors];

export type RegisterNewUserUsersRegisterPostResponses = {
  /**
   * Successful Response
   */
  200: UserResponse;
};

export type RegisterNewUserUsersRegisterPostResponse =
  RegisterNewUserUsersRegisterPostResponses[keyof RegisterNewUserUsersRegisterPostResponses];

export type LoginForAccessTokenUsersLoginPostData = {
  body: BodyLoginForAccessTokenUsersLoginPost;
  path?: never;
  query?: never;
  url: '/users/login';
};

export type LoginForAccessTokenUsersLoginPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LoginForAccessTokenUsersLoginPostError =
  LoginForAccessTokenUsersLoginPostErrors[keyof LoginForAccessTokenUsersLoginPostErrors];

export type LoginForAccessTokenUsersLoginPostResponses = {
  /**
   * Successful Response
   */
  200: Token;
};

export type LoginForAccessTokenUsersLoginPostResponse =
  LoginForAccessTokenUsersLoginPostResponses[keyof LoginForAccessTokenUsersLoginPostResponses];

export type RefreshAccessTokenUsersRefreshPostData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/users/refresh';
};

export type RefreshAccessTokenUsersRefreshPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type RefreshAccessTokenUsersRefreshPostError =
  RefreshAccessTokenUsersRefreshPostErrors[keyof RefreshAccessTokenUsersRefreshPostErrors];

export type RefreshAccessTokenUsersRefreshPostResponses = {
  /**
   * Successful Response
   */
  200: Token;
};

export type RefreshAccessTokenUsersRefreshPostResponse =
  RefreshAccessTokenUsersRefreshPostResponses[keyof RefreshAccessTokenUsersRefreshPostResponses];

export type LogoutUsersLogoutDeleteData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/users/logout';
};

export type LogoutUsersLogoutDeleteResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type GetCurrentUserInfoUsersInfoGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/users/info';
};

export type GetCurrentUserInfoUsersInfoGetResponses = {
  /**
   * Successful Response
   */
  200: UserResponse;
};

export type GetCurrentUserInfoUsersInfoGetResponse =
  GetCurrentUserInfoUsersInfoGetResponses[keyof GetCurrentUserInfoUsersInfoGetResponses];

export type UpdateUserInfoUsersUpdatePatchData = {
  body: UpdateUserForm;
  path?: never;
  query?: never;
  url: '/users/update';
};

export type UpdateUserInfoUsersUpdatePatchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UpdateUserInfoUsersUpdatePatchError =
  UpdateUserInfoUsersUpdatePatchErrors[keyof UpdateUserInfoUsersUpdatePatchErrors];

export type UpdateUserInfoUsersUpdatePatchResponses = {
  /**
   * Successful Response
   */
  200: UserResponse;
};

export type UpdateUserInfoUsersUpdatePatchResponse =
  UpdateUserInfoUsersUpdatePatchResponses[keyof UpdateUserInfoUsersUpdatePatchResponses];

export type VerifyEmailUsersVerifyEmailGetData = {
  body?: never;
  path?: never;
  query: {
    token: string;
  };
  url: '/users/verify-email';
};

export type VerifyEmailUsersVerifyEmailGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type VerifyEmailUsersVerifyEmailGetError =
  VerifyEmailUsersVerifyEmailGetErrors[keyof VerifyEmailUsersVerifyEmailGetErrors];

export type VerifyEmailUsersVerifyEmailGetResponses = {
  /**
   * Successful Response
   */
  200: UserResponse;
};

export type VerifyEmailUsersVerifyEmailGetResponse =
  VerifyEmailUsersVerifyEmailGetResponses[keyof VerifyEmailUsersVerifyEmailGetResponses];

export type SendVerificationEmailUsersVerifyEmailPostData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/users/verify-email';
};

export type SendVerificationEmailUsersVerifyEmailPostResponses = {
  /**
   * Successful Response
   */
  200: UserResponse;
};

export type SendVerificationEmailUsersVerifyEmailPostResponse =
  SendVerificationEmailUsersVerifyEmailPostResponses[keyof SendVerificationEmailUsersVerifyEmailPostResponses];

export type ResetPasswosdUsersResetPasswordPatchData = {
  body: PasswordResetForm;
  path?: never;
  query: {
    token: string;
  };
  url: '/users/reset-password';
};

export type ResetPasswosdUsersResetPasswordPatchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ResetPasswosdUsersResetPasswordPatchError =
  ResetPasswosdUsersResetPasswordPatchErrors[keyof ResetPasswosdUsersResetPasswordPatchErrors];

export type ResetPasswosdUsersResetPasswordPatchResponses = {
  /**
   * Successful Response
   */
  200: UserResponse;
};

export type ResetPasswosdUsersResetPasswordPatchResponse =
  ResetPasswosdUsersResetPasswordPatchResponses[keyof ResetPasswosdUsersResetPasswordPatchResponses];

export type SendResetPasswordEmailUsersResetPasswordPostData = {
  body: EmailRequest;
  path?: never;
  query?: never;
  url: '/users/reset-password';
};

export type SendResetPasswordEmailUsersResetPasswordPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type SendResetPasswordEmailUsersResetPasswordPostError =
  SendResetPasswordEmailUsersResetPasswordPostErrors[keyof SendResetPasswordEmailUsersResetPasswordPostErrors];

export type SendResetPasswordEmailUsersResetPasswordPostResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type UploadFileFilesUploadPostData = {
  body: BodyUploadFileFilesUploadPost;
  path?: never;
  query?: never;
  url: '/files/upload';
};

export type UploadFileFilesUploadPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type UploadFileFilesUploadPostError =
  UploadFileFilesUploadPostErrors[keyof UploadFileFilesUploadPostErrors];

export type UploadFileFilesUploadPostResponses = {
  /**
   * Successful Response
   */
  200: FileResponse;
};

export type UploadFileFilesUploadPostResponse =
  UploadFileFilesUploadPostResponses[keyof UploadFileFilesUploadPostResponses];

export type ListFilesFilesGetData = {
  body?: never;
  path?: never;
  query?: {
    page?: number;
    page_size?: number;
    sort_by?: SortBy;
    order?: SortOrder;
  };
  url: '/files/';
};

export type ListFilesFilesGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ListFilesFilesGetError =
  ListFilesFilesGetErrors[keyof ListFilesFilesGetErrors];

export type ListFilesFilesGetResponses = {
  /**
   * Successful Response
   */
  200: ListFilesResponse;
};

export type ListFilesFilesGetResponse =
  ListFilesFilesGetResponses[keyof ListFilesFilesGetResponses];

export type DeleteFileFilesFileIdDeleteData = {
  body?: never;
  path: {
    file_id: number;
  };
  query?: never;
  url: '/files/{file_id}';
};

export type DeleteFileFilesFileIdDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type DeleteFileFilesFileIdDeleteError =
  DeleteFileFilesFileIdDeleteErrors[keyof DeleteFileFilesFileIdDeleteErrors];

export type DeleteFileFilesFileIdDeleteResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type RetryFileFilesFileIdRetryPatchData = {
  body?: never;
  path: {
    file_id: number;
  };
  query?: never;
  url: '/files/{file_id}/retry';
};

export type RetryFileFilesFileIdRetryPatchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type RetryFileFilesFileIdRetryPatchError =
  RetryFileFilesFileIdRetryPatchErrors[keyof RetryFileFilesFileIdRetryPatchErrors];

export type RetryFileFilesFileIdRetryPatchResponses = {
  /**
   * Successful Response
   */
  200: FileResponse;
};

export type RetryFileFilesFileIdRetryPatchResponse =
  RetryFileFilesFileIdRetryPatchResponses[keyof RetryFileFilesFileIdRetryPatchResponses];

export type CancelFileFilesFileIdCancelPatchData = {
  body?: never;
  path: {
    file_id: number;
  };
  query?: never;
  url: '/files/{file_id}/cancel';
};

export type CancelFileFilesFileIdCancelPatchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type CancelFileFilesFileIdCancelPatchError =
  CancelFileFilesFileIdCancelPatchErrors[keyof CancelFileFilesFileIdCancelPatchErrors];

export type CancelFileFilesFileIdCancelPatchResponses = {
  /**
   * Successful Response
   */
  200: FileResponse;
};

export type CancelFileFilesFileIdCancelPatchResponse =
  CancelFileFilesFileIdCancelPatchResponses[keyof CancelFileFilesFileIdCancelPatchResponses];

export type ClientOptions = {
  baseUrl: `${string}://${string}/api/v1` | (string & {});
};
