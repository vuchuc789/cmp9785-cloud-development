// This file is auto-generated by @hey-api/openapi-ts

export const AudioAltFileSchema = {
  properties: {
    url: {
      type: 'string',
    },
    bit_rate: {
      type: 'integer',
    },
    filesize: {
      type: 'integer',
    },
    filetype: {
      type: 'string',
    },
    sample_rate: {
      type: 'integer',
    },
  },
  type: 'object',
  required: ['url', 'bit_rate', 'filesize', 'filetype', 'sample_rate'],
} as const;

export const AudioCategorySchema = {
  type: 'string',
  enum: [
    'audiobook',
    'music',
    'news',
    'podcast',
    'pronunciation',
    'sound_effect',
  ],
} as const;

export const AudioLengthSchema = {
  type: 'string',
  enum: ['long', 'medium', 'short', 'shortest'],
} as const;

export const AudioSearchItemSchema = {
  properties: {
    id: {
      type: 'string',
    },
    title: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    indexed_on: {
      type: 'string',
      format: 'date-time',
    },
    foreign_landing_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    creator: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    creator_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    license: {
      type: 'string',
    },
    license_version: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    license_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    provider: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    source: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    category: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    genres: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
    },
    filesize: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
    },
    filetype: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    tags: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/MediaTag',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
    },
    alt_files: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/AudioAltFile',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
    },
    attribution: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    fields_matched: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
    },
    mature: {
      type: 'boolean',
    },
    audio_set: {
      anyOf: [
        {
          $ref: '#/components/schemas/AudioSet',
        },
        {
          type: 'null',
        },
      ],
    },
    duration: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
    },
    bit_rate: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
    },
    sample_rate: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
    },
    thumbnail: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    detail_url: {
      type: 'string',
    },
    related_url: {
      type: 'string',
    },
    waveform: {
      type: 'string',
    },
  },
  type: 'object',
  required: [
    'id',
    'title',
    'indexed_on',
    'foreign_landing_url',
    'url',
    'creator',
    'creator_url',
    'license',
    'license_version',
    'license_url',
    'provider',
    'source',
    'category',
    'genres',
    'filesize',
    'filetype',
    'tags',
    'alt_files',
    'attribution',
    'fields_matched',
    'mature',
    'audio_set',
    'duration',
    'bit_rate',
    'sample_rate',
    'thumbnail',
    'detail_url',
    'related_url',
    'waveform',
  ],
} as const;

export const AudioSearchResponseSchema = {
  properties: {
    result_count: {
      type: 'integer',
    },
    page_count: {
      type: 'integer',
    },
    page_size: {
      type: 'integer',
    },
    page: {
      type: 'integer',
    },
    results: {
      items: {
        $ref: '#/components/schemas/AudioSearchItem',
      },
      type: 'array',
    },
    warnings: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
    },
  },
  type: 'object',
  required: ['result_count', 'page_count', 'page_size', 'page', 'results'],
} as const;

export const AudioSetSchema = {
  properties: {
    title: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    foreign_landing_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    creator: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    creator_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    filesize: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
    },
    filetype: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
  },
  type: 'object',
  required: [
    'title',
    'foreign_landing_url',
    'creator',
    'creator_url',
    'url',
    'filesize',
    'filetype',
  ],
} as const;

export const Body_login_for_access_token_users_login_postSchema = {
  properties: {
    grant_type: {
      anyOf: [
        {
          type: 'string',
          pattern: '^password$',
        },
        {
          type: 'null',
        },
      ],
    },
    username: {
      type: 'string',
    },
    password: {
      type: 'string',
    },
    scope: {
      type: 'string',
      default: '',
    },
    client_id: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    client_secret: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
  },
  type: 'object',
  required: ['username', 'password'],
} as const;

export const Body_upload_file_files_upload_postSchema = {
  properties: {
    file: {
      type: 'string',
      format: 'binary',
    },
  },
  type: 'object',
  required: ['file'],
} as const;

export const CreateUserFormSchema = {
  properties: {
    username: {
      type: 'string',
      maxLength: 50,
      minLength: 6,
    },
    email: {
      anyOf: [
        {
          type: 'string',
          format: 'email',
        },
        {
          type: 'null',
        },
      ],
    },
    full_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    password: {
      type: 'string',
      maxLength: 50,
      minLength: 6,
    },
    password_repeat: {
      type: 'string',
      maxLength: 50,
      minLength: 6,
    },
  },
  type: 'object',
  required: ['username', 'password', 'password_repeat'],
} as const;

export const EmailRequestSchema = {
  properties: {
    email: {
      type: 'string',
      format: 'email',
    },
  },
  type: 'object',
  required: ['email'],
} as const;

export const EmailVerificationStatusSchema = {
  type: 'string',
  enum: ['verified', 'verifying', 'none'],
} as const;

export const FileDescriptionResponseSchema = {
  properties: {
    id: {
      type: 'integer',
    },
    description: {
      type: 'string',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
    },
  },
  type: 'object',
  required: ['id', 'description', 'created_at'],
} as const;

export const FileProcessingStatusSchema = {
  type: 'string',
  enum: ['pending', 'processing', 'success', 'failed', 'cancelled', 'unknown'],
} as const;

export const FileResponseSchema = {
  properties: {
    id: {
      type: 'integer',
    },
    filename: {
      type: 'string',
    },
    status: {
      $ref: '#/components/schemas/FileProcessingStatus',
    },
    size: {
      type: 'integer',
    },
    type: {
      type: 'string',
    },
    url: {
      type: 'string',
    },
    created_at: {
      type: 'string',
      format: 'date-time',
    },
    active_file_description_id: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
    },
    file_descriptions: {
      items: {
        $ref: '#/components/schemas/FileDescriptionResponse',
      },
      type: 'array',
    },
  },
  type: 'object',
  required: [
    'id',
    'filename',
    'status',
    'size',
    'type',
    'url',
    'created_at',
    'active_file_description_id',
    'file_descriptions',
  ],
} as const;

export const HTTPValidationErrorSchema = {
  properties: {
    detail: {
      items: {
        $ref: '#/components/schemas/ValidationError',
      },
      type: 'array',
    },
  },
  type: 'object',
} as const;

export const ImageAspectRatioSchema = {
  type: 'string',
  enum: ['square', 'tall', 'wide'],
} as const;

export const ImageCategorySchema = {
  type: 'string',
  enum: ['digitized_artwork', 'illustration', 'photograph'],
} as const;

export const ImageSearchItemSchema = {
  properties: {
    id: {
      type: 'string',
    },
    title: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    indexed_on: {
      type: 'string',
      format: 'date-time',
    },
    foreign_landing_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    creator: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    creator_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    license: {
      type: 'string',
    },
    license_version: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    license_url: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    provider: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    source: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    category: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    filesize: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
    },
    filetype: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    tags: {
      anyOf: [
        {
          items: {
            $ref: '#/components/schemas/MediaTag',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
    },
    attribution: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    fields_matched: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
    },
    mature: {
      type: 'boolean',
    },
    height: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
    },
    width: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
    },
    thumbnail: {
      type: 'string',
    },
    detail_url: {
      type: 'string',
    },
    related_url: {
      type: 'string',
    },
  },
  type: 'object',
  required: [
    'id',
    'title',
    'indexed_on',
    'foreign_landing_url',
    'url',
    'creator',
    'creator_url',
    'license',
    'license_version',
    'license_url',
    'provider',
    'source',
    'category',
    'filesize',
    'filetype',
    'tags',
    'attribution',
    'fields_matched',
    'mature',
    'height',
    'width',
    'thumbnail',
    'detail_url',
    'related_url',
  ],
} as const;

export const ImageSearchResponseSchema = {
  properties: {
    result_count: {
      type: 'integer',
    },
    page_count: {
      type: 'integer',
    },
    page_size: {
      type: 'integer',
    },
    page: {
      type: 'integer',
    },
    results: {
      items: {
        $ref: '#/components/schemas/ImageSearchItem',
      },
      type: 'array',
    },
    warnings: {
      anyOf: [
        {
          items: {
            type: 'object',
          },
          type: 'array',
        },
        {
          type: 'null',
        },
      ],
    },
  },
  type: 'object',
  required: ['result_count', 'page_count', 'page_size', 'page', 'results'],
} as const;

export const ImageSizeSchema = {
  type: 'string',
  enum: ['large', 'medium', 'small'],
} as const;

export const ListFilesResponseSchema = {
  properties: {
    result_count: {
      type: 'integer',
    },
    page_count: {
      type: 'integer',
    },
    page_size: {
      type: 'integer',
    },
    page: {
      type: 'integer',
    },
    results: {
      items: {
        $ref: '#/components/schemas/FileResponse',
      },
      type: 'array',
    },
  },
  type: 'object',
  required: ['result_count', 'page_count', 'page_size', 'page', 'results'],
} as const;

export const MediaHistoryResponseSchema = {
  properties: {
    keyword: {
      type: 'string',
    },
    timestamp: {
      type: 'string',
      format: 'date-time',
    },
  },
  type: 'object',
  required: ['keyword', 'timestamp'],
} as const;

export const MediaLicenseSchema = {
  type: 'string',
  enum: [
    'by',
    'by-nc',
    'by-nc-nd',
    'by-nc-sa',
    'by-nd',
    'by-sa',
    'cc0',
    'nc-sampling+',
    'pdm',
    'sampling+',
  ],
} as const;

export const MediaLicenseTypeSchema = {
  type: 'string',
  enum: ['all', 'all-cc', 'commercial', 'modification'],
} as const;

export const MediaTagSchema = {
  properties: {
    accuracy: {
      anyOf: [
        {
          type: 'number',
        },
        {
          type: 'null',
        },
      ],
    },
    name: {
      type: 'string',
    },
    unstable__provider: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
  },
  type: 'object',
  required: ['accuracy', 'name', 'unstable__provider'],
} as const;

export const MediaTypeSchema = {
  type: 'string',
  enum: ['image', 'audio'],
} as const;

export const PasswordResetFormSchema = {
  properties: {
    password: {
      type: 'string',
      maxLength: 50,
      minLength: 6,
    },
    password_repeat: {
      type: 'string',
      maxLength: 50,
      minLength: 6,
    },
  },
  type: 'object',
  required: ['password', 'password_repeat'],
} as const;

export const SortBySchema = {
  type: 'string',
  enum: ['created_at', 'name', 'status'],
} as const;

export const SortOrderSchema = {
  type: 'string',
  enum: ['asc', 'desc'],
} as const;

export const TokenSchema = {
  properties: {
    access_token: {
      type: 'string',
    },
    token_type: {
      type: 'string',
    },
  },
  type: 'object',
  required: ['access_token', 'token_type'],
} as const;

export const UpdateUserFormSchema = {
  properties: {
    username: {
      type: 'string',
      maxLength: 50,
      minLength: 6,
    },
    email: {
      anyOf: [
        {
          type: 'string',
          format: 'email',
        },
        {
          type: 'null',
        },
      ],
    },
    full_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    password: {
      anyOf: [
        {
          type: 'string',
          maxLength: 50,
          minLength: 6,
        },
        {
          type: 'null',
        },
      ],
    },
    password_repeat: {
      anyOf: [
        {
          type: 'string',
          maxLength: 50,
          minLength: 6,
        },
        {
          type: 'null',
        },
      ],
    },
  },
  type: 'object',
  required: ['username'],
} as const;

export const UserResponseSchema = {
  properties: {
    username: {
      type: 'string',
      maxLength: 50,
      minLength: 6,
    },
    email: {
      anyOf: [
        {
          type: 'string',
          format: 'email',
        },
        {
          type: 'null',
        },
      ],
    },
    full_name: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
    },
    email_verification_status: {
      $ref: '#/components/schemas/EmailVerificationStatus',
    },
  },
  type: 'object',
  required: ['username', 'email_verification_status'],
} as const;

export const ValidationErrorSchema = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: 'string',
          },
          {
            type: 'integer',
          },
        ],
      },
      type: 'array',
    },
    msg: {
      type: 'string',
    },
    type: {
      type: 'string',
    },
  },
  type: 'object',
  required: ['loc', 'msg', 'type'],
} as const;
