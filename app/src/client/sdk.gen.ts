// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  urlSearchParamsBodySerializer,
  formDataBodySerializer,
} from '@hey-api/client-next';
import type {
  RootGetData,
  RegisterNewUserUsersRegisterPostData,
  RegisterNewUserUsersRegisterPostResponse,
  RegisterNewUserUsersRegisterPostError,
  LoginForAccessTokenUsersLoginPostData,
  LoginForAccessTokenUsersLoginPostResponse,
  LoginForAccessTokenUsersLoginPostError,
  RefreshAccessTokenUsersRefreshPostData,
  RefreshAccessTokenUsersRefreshPostResponse,
  RefreshAccessTokenUsersRefreshPostError,
  LogoutUsersLogoutDeleteData,
  GetCurrentUserInfoUsersInfoGetData,
  GetCurrentUserInfoUsersInfoGetResponse,
  UpdateUserInfoUsersUpdatePatchData,
  UpdateUserInfoUsersUpdatePatchResponse,
  UpdateUserInfoUsersUpdatePatchError,
  VerifyEmailUsersVerifyEmailGetData,
  VerifyEmailUsersVerifyEmailGetResponse,
  VerifyEmailUsersVerifyEmailGetError,
  SendVerificationEmailUsersVerifyEmailPostData,
  SendVerificationEmailUsersVerifyEmailPostResponse,
  ResetPasswosdUsersResetPasswordPatchData,
  ResetPasswosdUsersResetPasswordPatchResponse,
  ResetPasswosdUsersResetPasswordPatchError,
  SendResetPasswordEmailUsersResetPasswordPostData,
  SendResetPasswordEmailUsersResetPasswordPostError,
  UploadFileFilesUploadPostData,
  UploadFileFilesUploadPostResponse,
  UploadFileFilesUploadPostError,
  ListFilesFilesGetData,
  ListFilesFilesGetResponse,
  ListFilesFilesGetError,
  DeleteFileFilesFileIdDeleteData,
  DeleteFileFilesFileIdDeleteError,
  RetryFileFilesFileIdRetryPatchData,
  RetryFileFilesFileIdRetryPatchResponse,
  RetryFileFilesFileIdRetryPatchError,
  CancelFileFilesFileIdCancelPatchData,
  CancelFileFilesFileIdCancelPatchResponse,
  CancelFileFilesFileIdCancelPatchError,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';
import {
  zRegisterNewUserUsersRegisterPostResponse,
  zLoginForAccessTokenUsersLoginPostResponse,
  zRefreshAccessTokenUsersRefreshPostResponse,
  zGetCurrentUserInfoUsersInfoGetResponse,
  zUpdateUserInfoUsersUpdatePatchResponse,
  zVerifyEmailUsersVerifyEmailGetResponse,
  zSendVerificationEmailUsersVerifyEmailPostResponse,
  zResetPasswosdUsersResetPasswordPatchResponse,
  zUploadFileFilesUploadPostResponse,
  zListFilesFilesGetResponse,
  zRetryFileFilesFileIdRetryPatchResponse,
  zCancelFileFilesFileIdCancelPatchResponse,
} from './zod.gen';
import {
  uploadFileFilesUploadPostResponseTransformer,
  listFilesFilesGetResponseTransformer,
  retryFileFilesFileIdRetryPatchResponseTransformer,
  cancelFileFilesFileIdCancelPatchResponseTransformer,
} from './transformers.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(
  options?: Options<RootGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: '/',
      ...options,
    }
  );
};

/**
 * Register New User
 */
export const registerNewUserUsersRegisterPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<RegisterNewUserUsersRegisterPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    RegisterNewUserUsersRegisterPostResponse,
    RegisterNewUserUsersRegisterPostError,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    responseValidator: async (data) => {
      return await zRegisterNewUserUsersRegisterPostResponse.parseAsync(data);
    },
    url: '/users/register',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
  });
};

/**
 * Login For Access Token
 */
export const loginForAccessTokenUsersLoginPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<LoginForAccessTokenUsersLoginPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    LoginForAccessTokenUsersLoginPostResponse,
    LoginForAccessTokenUsersLoginPostError,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    responseValidator: async (data) => {
      return await zLoginForAccessTokenUsersLoginPostResponse.parseAsync(data);
    },
    url: '/users/login',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
  });
};

/**
 * Refresh Access Token
 */
export const refreshAccessTokenUsersRefreshPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<RefreshAccessTokenUsersRefreshPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    RefreshAccessTokenUsersRefreshPostResponse,
    RefreshAccessTokenUsersRefreshPostError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zRefreshAccessTokenUsersRefreshPostResponse.parseAsync(data);
    },
    url: '/users/refresh',
    ...options,
  });
};

/**
 * Logout
 */
export const logoutUsersLogoutDelete = <ThrowOnError extends boolean = false>(
  options?: Options<LogoutUsersLogoutDeleteData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).delete<
    unknown,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/users/logout',
    ...options,
  });
};

/**
 * Get Current User Info
 */
export const getCurrentUserInfoUsersInfoGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetCurrentUserInfoUsersInfoGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCurrentUserInfoUsersInfoGetResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    responseValidator: async (data) => {
      return await zGetCurrentUserInfoUsersInfoGetResponse.parseAsync(data);
    },
    url: '/users/info',
    ...options,
  });
};

/**
 * Update User Info
 */
export const updateUserInfoUsersUpdatePatch = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateUserInfoUsersUpdatePatchData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateUserInfoUsersUpdatePatchResponse,
    UpdateUserInfoUsersUpdatePatchError,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    responseValidator: async (data) => {
      return await zUpdateUserInfoUsersUpdatePatchResponse.parseAsync(data);
    },
    url: '/users/update',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
  });
};

/**
 * Verify Email
 */
export const verifyEmailUsersVerifyEmailGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<VerifyEmailUsersVerifyEmailGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    VerifyEmailUsersVerifyEmailGetResponse,
    VerifyEmailUsersVerifyEmailGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zVerifyEmailUsersVerifyEmailGetResponse.parseAsync(data);
    },
    url: '/users/verify-email',
    ...options,
  });
};

/**
 * Send Verification Email
 */
export const sendVerificationEmailUsersVerifyEmailPost = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<SendVerificationEmailUsersVerifyEmailPostData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    SendVerificationEmailUsersVerifyEmailPostResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    responseValidator: async (data) => {
      return await zSendVerificationEmailUsersVerifyEmailPostResponse.parseAsync(
        data
      );
    },
    url: '/users/verify-email',
    ...options,
  });
};

/**
 * Reset Passwosd
 */
export const resetPasswosdUsersResetPasswordPatch = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ResetPasswosdUsersResetPasswordPatchData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    ResetPasswosdUsersResetPasswordPatchResponse,
    ResetPasswosdUsersResetPasswordPatchError,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    responseValidator: async (data) => {
      return await zResetPasswosdUsersResetPasswordPatchResponse.parseAsync(
        data
      );
    },
    url: '/users/reset-password',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
  });
};

/**
 * Send Reset Password Email
 */
export const sendResetPasswordEmailUsersResetPasswordPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    SendResetPasswordEmailUsersResetPasswordPostData,
    ThrowOnError
  >
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    SendResetPasswordEmailUsersResetPasswordPostError,
    ThrowOnError
  >({
    url: '/users/reset-password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Upload File
 */
export const uploadFileFilesUploadPost = <ThrowOnError extends boolean = false>(
  options: Options<UploadFileFilesUploadPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UploadFileFilesUploadPostResponse,
    UploadFileFilesUploadPostError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    responseTransformer: uploadFileFilesUploadPostResponseTransformer,
    responseValidator: async (data) => {
      return await zUploadFileFilesUploadPostResponse.parseAsync(data);
    },
    url: '/files/upload',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  });
};

/**
 * List Files
 */
export const listFilesFilesGet = <ThrowOnError extends boolean = false>(
  options?: Options<ListFilesFilesGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListFilesFilesGetResponse,
    ListFilesFilesGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    responseTransformer: listFilesFilesGetResponseTransformer,
    responseValidator: async (data) => {
      return await zListFilesFilesGetResponse.parseAsync(data);
    },
    url: '/files/',
    ...options,
  });
};

/**
 * Delete File
 */
export const deleteFileFilesFileIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteFileFilesFileIdDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    DeleteFileFilesFileIdDeleteError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/files/{file_id}',
    ...options,
  });
};

/**
 * Retry File
 */
export const retryFileFilesFileIdRetryPatch = <
  ThrowOnError extends boolean = false,
>(
  options: Options<RetryFileFilesFileIdRetryPatchData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    RetryFileFilesFileIdRetryPatchResponse,
    RetryFileFilesFileIdRetryPatchError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    responseTransformer: retryFileFilesFileIdRetryPatchResponseTransformer,
    responseValidator: async (data) => {
      return await zRetryFileFilesFileIdRetryPatchResponse.parseAsync(data);
    },
    url: '/files/{file_id}/retry',
    ...options,
  });
};

/**
 * Cancel File
 */
export const cancelFileFilesFileIdCancelPatch = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CancelFileFilesFileIdCancelPatchData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    CancelFileFilesFileIdCancelPatchResponse,
    CancelFileFilesFileIdCancelPatchError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    responseTransformer: cancelFileFilesFileIdCancelPatchResponseTransformer,
    responseValidator: async (data) => {
      return await zCancelFileFilesFileIdCancelPatchResponse.parseAsync(data);
    },
    url: '/files/{file_id}/cancel',
    ...options,
  });
};
